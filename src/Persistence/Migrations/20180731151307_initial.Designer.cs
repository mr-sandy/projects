// <auto-generated />
using System;
using Linn.Projects.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Linn.Projects.Persistence.Migrations
{
    [DbContext(typeof(ServiceDbContext))]
    [Migration("20180731151307_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Linn.Projects.Domain.Activities.Activity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ActivityDate");

                    b.Property<string>("ActivityType")
                        .IsRequired();

                    b.Property<string>("EmployeeUrl");

                    b.Property<int?>("ProjectId");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Activity");

                    b.HasDiscriminator<string>("ActivityType").HasValue("Activity");
                });

            modelBuilder.Entity("Linn.Projects.Domain.Phase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("EndDate");

                    b.Property<int>("PhaseNumber");

                    b.Property<int?>("ProjectId");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Phase");
                });

            modelBuilder.Entity("Linn.Projects.Domain.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<DateTime>("StartDate");

                    b.HasKey("Id");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("Linn.Projects.Domain.Activities.AddPhaseActivity", b =>
                {
                    b.HasBaseType("Linn.Projects.Domain.Activities.Activity");

                    b.Property<DateTime>("EndDate");

                    b.Property<int>("PhaseNumber");

                    b.Property<int>("Status");

                    b.ToTable("AddPhaseActivity");

                    b.HasDiscriminator().HasValue("add-phase");
                });

            modelBuilder.Entity("Linn.Projects.Domain.Activities.CreateActivity", b =>
                {
                    b.HasBaseType("Linn.Projects.Domain.Activities.Activity");

                    b.Property<string>("Name");

                    b.Property<int>("Phases");

                    b.Property<DateTime>("StartDate");

                    b.ToTable("CreateActivity");

                    b.HasDiscriminator().HasValue("create-project");
                });

            modelBuilder.Entity("Linn.Projects.Domain.Activities.RemovePhaseActivity", b =>
                {
                    b.HasBaseType("Linn.Projects.Domain.Activities.Activity");

                    b.Property<int>("PhaseNumber")
                        .HasColumnName("RemovePhaseActivity_PhaseNumber");

                    b.ToTable("RemovePhaseActivity");

                    b.HasDiscriminator().HasValue("remove-phase");
                });

            modelBuilder.Entity("Linn.Projects.Domain.Activities.UpdateActivity", b =>
                {
                    b.HasBaseType("Linn.Projects.Domain.Activities.Activity");

                    b.Property<string>("Name")
                        .HasColumnName("UpdateActivity_Name");

                    b.Property<string>("PreviousName");

                    b.Property<DateTime>("PreviousStartDate");

                    b.Property<DateTime>("StartDate")
                        .HasColumnName("UpdateActivity_StartDate");

                    b.ToTable("UpdateActivity");

                    b.HasDiscriminator().HasValue("update-project");
                });

            modelBuilder.Entity("Linn.Projects.Domain.Activities.UpdatePhaseActivity", b =>
                {
                    b.HasBaseType("Linn.Projects.Domain.Activities.Activity");

                    b.Property<DateTime>("EndDate")
                        .HasColumnName("UpdatePhaseActivity_EndDate");

                    b.Property<int>("PhaseNumber")
                        .HasColumnName("UpdatePhaseActivity_PhaseNumber");

                    b.Property<DateTime>("PreviousEndDate");

                    b.Property<int>("PreviousStatus");

                    b.Property<int>("Status")
                        .HasColumnName("UpdatePhaseActivity_Status");

                    b.ToTable("UpdatePhaseActivity");

                    b.HasDiscriminator().HasValue("update-phase");
                });

            modelBuilder.Entity("Linn.Projects.Domain.Activities.Activity", b =>
                {
                    b.HasOne("Linn.Projects.Domain.Project")
                        .WithMany("Activities")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Linn.Projects.Domain.Phase", b =>
                {
                    b.HasOne("Linn.Projects.Domain.Project", "Project")
                        .WithMany("Phases")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
